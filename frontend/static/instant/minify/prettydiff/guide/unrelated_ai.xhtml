<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.1//EN' 'http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd'>
<html xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <title>Pretty Diff - Guide, A Poor Man's Artificial Intelligence</title>
        <link href="../css/index.css" media="all" rel="stylesheet" type="text/css"/>
        <link
            href="http://prettydiff.com/guide/unrelated_dom.xhtml"
            rel="canonical"
            type="application/xhtml+xml"/>
        <link
            href="http://prettydiff.com/images/favicon.ico"
            rel="icon"
            type="image/x-icon"/>
        <link
            href="http://prettydiff.com/labels.rdf"
            rel="meta"
            title="ICRA labels"
            type="application/rdf+xml"/>
        <meta content="width=device-width, initial-scale=1" name="viewport"/>
        <meta content="index, follow" name="robots"/>
        <meta
            content="Pretty Diff - Guide, The DOM Explained, Quick and Simple"
            name="DC.title"/>
        <meta
            content="(pics-1.1 'http://www.icra.org/pics/vocabularyv03/' l gen true for 'http://prettydiff.com' r (n 0 s 0 v 0 l 0 oa 0 ob 0 oc 0 od 0 oe 0 of 0 og 0 oh 0 c 1) gen true for 'http://www.prettydiff.com' r (n 0 s 0 v 0 l 0 oa 0 ob 0 oc 0 od 0 oe 0 of 0 og 0 oh 0 c 1))"
            http-equiv="pics-Label"/>
        <meta content="Austin Cheney" name="author"/>
        <meta
            content="Pretty Diff tool can minify, beautify (pretty-print), or diff between minified and beautified code. This tool can even beautify and minify HTML."
            name="description"/>
        <meta content="Global" name="distribution"/>
        <meta content="en" http-equiv="Content-Language"/>
        <meta content="application/xhtml+xml;charset=UTF-8" http-equiv="Content-Type"/>
        <meta content="blendTrans(Duration=0)" http-equiv="Page-Enter"/>
        <meta content="blendTrans(Duration=0)" http-equiv="Page-Exit"/>
        <meta content="text/css" http-equiv="content-style-type"/>
        <meta content="application/javascript" http-equiv="content-script-type"/>
        <meta
            content="qL8AV9yjL2-ZFGV9ey6wU3t7pTZdpD4lIetUSiNen7E"
            name="google-site-verification"/>
        <style type="text/css">
            #prettydiff table {
                width: 100%;
            }
            #prettydiff table td {
                color: #000;
            }
            #prettydiff table caption {
                font-size: 1.2em;
                font-style: italic;
                height: auto;
                left: 0;
                overflow: visible;
                position: relative;
                text-align: left;
                top: 0;
                width: auto;
            }
            #prettydiff tr.markup.even {
                background: #fdd;
            }
            #prettydiff tr.markup.odd {
                background: #fee;
            }
            #prettydiff tr.script.even {
                background: #ded;
            }
            #prettydiff tr.script.odd {
                background: #eefff8;
            }
            #prettydiff #cited li {
                list-style: none;
                margin: 0 0 1em 0;
                padding: 0 0 0 2em;
                text-indent: -2em;
            }
        </style>
    </head>
    <body class="white" id="prettydiff">
        <div class="contentarea" id="page">
            <section role="heading">
                <h1>
                    <svg
                        height="2000.000000pt"
                        id="pdlogo"
                        preserveaspectratio="xMidYMid meet"
                        version="1.0"
                        viewbox="0 0 2000.000000 2000.000000"
                        width="2000.000000pt"
                        xmlns="http://www.w3.org/2000/svg">
                        <g
                            fill="#999"
                            stroke="none"
                            transform="translate(0.000000,2000.000000) scale(0.100000,-0.100000)">
                            <path
                                d="M14871 18523 c-16 -64 -611 -2317 -946 -3588 -175 -660 -319 -1202 -320 -1204 -2 -2 -50 39 -107 91 -961 876 -2202 1358 -3498 1358 -1255 0 -2456 -451 -3409 -1279 -161 -140 -424 -408 -560 -571 -507 -607 -870 -1320 -1062 -2090 -58 -232 -386 -1479 -2309 -8759 -148 -563 -270 -1028 -270 -1033 0 -4 614 -8 1365 -8 l1364 0 10 38 c16 63 611 2316 946 3587 175 660 319 1202 320 1204 2 2 50 -39 107 -91 543 -495 1169 -862 1863 -1093 1707 -568 3581 -211 4965 946 252 210 554 524 767 796 111 143 312 445 408 613 229 406 408 854 525 1320 57 225 380 1451 2310 8759 148 563 270 1028 270 1033 0 4 -614 8 -1365 8 l-1364 0 -10 -37z m-4498 -5957 c477 -77 889 -256 1245 -542 523 -419 850 -998 954 -1689 18 -121 18 -549 0 -670 -80 -529 -279 -972 -612 -1359 -412 -480 -967 -779 -1625 -878 -121 -18 -549 -18 -670 0 -494 74 -918 255 -1283 548 -523 419 -850 998 -954 1689 -18 121 -18 549 0 670 104 691 431 1270 954 1689 365 293 828 490 1283 545 50 6 104 13 120 15 72 10 495 -3 588 -18z"/></g>
                    </svg>
                    <a href="../index.xhtml">Pretty Diff</a>
                    - Guide: A Poor Man's Artificial Intelligence</h1>
                <p id="dcolorScheme">
                    <label class="label" for="colorScheme">Color Scheme</label>
                    <select id="colorScheme">
                        <option>Canvas</option>
                        <option>Shadow</option>
                        <option selected="selected">White</option>
                    </select>
                </p>
                <p>Explore some
                    <a href="../samples.xhtml">samples</a>
                    or browse
                    <a href="https://github.com/prettydiff/prettydiff">Pretty Diff on GitHub</a>.</p>
            </section>
            <section role="main">
                <div class="segment" id="abstract">
                    <h2>Abstract</h2>
                    <p>Artificial intelligence is the idea that software may become smart enough to
                        form and evaluate decisions not directly provided to them in their application
                        code. This document proposes an idea to achieve such an objective in an
                        extensible manner.</p>
                </div>
                <div class="segment" id="preface">
                    <h2>Preface</h2>
                    <p>Please refrain from personal bias until the entirety of this paper is read.
                        In a recent discusion readers stopped reading the paper two paragraphs in because
                        their definition of artificial intelligence did not directly align with concepts
                        briefly mentioned in a summary.
                        <strong>Selection bias cost the world the greatest breakthrough in medical history
                            <a href="#cite-mirkin">(Mirkin, 2013)</a>.</strong>
                        Please don't allow your preconceptions to commit such a horrendous atrocity.</p>
                </div>
                <div class="segment" id="introduction">
                    <h2>Introduction</h2>
                    <p>The goal of artificial intelligence is software that spontaneously originates
                        creative decisions in response to a stimulus. The stimulus could be human
                        interaction, an automated news update, environmental change, or various other
                        factors. There are perahsp two fundamental challenges to solving for this: a
                        proper understaind of intelligence and a consideration for originality.</p>
                    <div class="segment" id="introduction_intelligence">
                        <h3>On the Nature of Intelligence</h3>
                        <p>A person cannot appreciate the concept of an artificial intelligence without
                            first appreciating a natural intelligence. Intelligence is not the measure of
                            accuracy of data. In many cases intelligent entities make decisions completely
                            in absence of desirable data merely because some stimulus demands a decision be
                            made.</p>
                        <p>A decision-making capacity does not suggest a measure of accuracy or
                            validity. Humans are generally considered substantially more intelligent than
                            the most powerful computational devices even though humans perform simple
                            arithmetic much slower and formulate incorrect decisions frequently. The
                            advantage humans have over powerful machines is a decision-making capacity. This
                            is the ability to spontaneously make an original decision unassisted.</p>
                    </div>
                    <div class="segment" id="introduction_neurophysiology">
                        <h3>A Brief Observation of Animal Neurophysiology</h3>
                        <p>Animals of various species and capabilities are so far observed making,
                            modifying, and manipulating the results of tool formations
                            <a href="#cite-pickrell">(Pickrell, 2003)</a>. There is not a single area of
                            animal brains responsible for any single step in this process. Animal brains are
                            not a single organ, but rather a tool box of various tools acting in concert.
                            These different neurological tools are specially modified and honed through the
                            life experiences of the given animal in a condition called neuroplasticity.</p>
                        <p>Ther are several important considerations relevant from the study of the brain.</p>
                        <ul>
                            <li>Intelligence is determined not by the size of the brain but by the variety
                                of components that comprise the brain. Corvids are among the most intelligent
                                animals on the planet
                                <a href="#cite-owen">(Owen, 2004)</a>, some posessing an intelligence almost
                                comparable to a human, and yet their brain is the size of a pecan nut, at
                                largest. Contrarily elephant brains be three times heavier than a human brain
                                without the benefit of three times the intelligence
                                <a href="#cite-herculano">(Herculano-Houzel, et al., 2014)</a>.</li>
                            <li>Animal brains are neither a single organ nor a bag of isolated components
                                <a href="#cite-newitz">(Newitz, 2015)</a>. Instead the brain is a mesh of
                                different components performing specialized tasks and sharing their processing
                                with other areas of the brain. It is the collectivized result of various
                                different processing centers of the brain that results in a decision wherether
                                cognitive or non-cognitive.</li>
                            <li>Animal brains change and adapt in reflection to experiences at any point in
                                the lifespan of the brain
                                <a href="#cite-cherry">(Cherry, 2017)</a>.</li>
                        </ul>
                        <p>These observations identify some of the capabilities that allow intelligence
                            and responsiveness in animal brains, which are features software does not
                            currently possess.</p>
                    </div>
                    <div class="segment" id="introduction_originality">
                        <h3>Creativity and Originality</h3>
                        <p>Perhaps the most agreed upon definition of intelligence is creativity, which
                            is the ability to create that which is unique or original. This can only be
                            achieved through a series of decisions and evaluations that are independently
                            and wholly internally open to modification without external assistance. This
                            phenomenon is commonly referred to as
                            <em>brilliance</em>.</p>
                        <p>Producing a creative intelligence comes with some challenges:</p>
                        <ul>
                            <li>Consuming modified application logic in applications accessible from the
                                primary application stack.</li>
                            <li>Setting appropriate boundaries so that self-modifying application logic
                                doesn't modify continuously in an endless loop.</li>
                            <li>Validating that a given objective is satisfied and thus an application
                                should terminate from further self-modification.</li>
                        </ul>
                        <p>Achieving creativity may likely require various different intelligent systems
                            operating in concert so as to guide and limit each other to externally specified
                            bounds.</p>
                    </div>
                    <div class="segment" id="introduction_endstate">
                        <h3>End State</h3>
                        <p>Simply speaking an autonomous intelligence is a system capable of forming
                            original decisions spontaneously. That definition is challenging to measure in a
                            qualitative fashion as the underlying qualifications are subjective in practice.
                            Speaking analogously, it is hard to tell if you have crossed that proverbial
                            line in the sand if the line is blurry and occasionally shifts in distance and
                            direction. A more simplistic measure of intelligence is a system capable of
                            making decisions that cast doubt on the system's prior assertions. According to
                            Cartesian logic a thinking machine is that which is sufficiently able to doubt
                            as the mere ability to doubt is a primal essence that cannot be reduced from an
                            intelligent self
                            <a href="#cite-descartes">(Descartes, 1993)</a>.</p>
                    </div>
                </div>
                <div class="segment" id="terms">
                    <h2>Definition of Terms</h2>
                    <p>Before moving into precise details some definitions are established to ensure
                        a shared understanding of technical terms between reader and author.</p>
                    <dl>
                        <dt>Application modification</dt>
                        <dd>It should be noted this paper will not make use of the term
                            <em>machine learning</em>. That term has a common use in computer science with
                            relation to algorithmic choices in response to information discovery upon large
                            sets of data. Instead this paper will use the phrase
                            <em>application modification</em>
                            to refer to self-improving software.</dd>
                        <dt>Compiler</dt>
                        <dd>Translates computer code from one language into another language.</dd>
                        <dt>Creativity</dt>
                        <dd>The continuous potential for creating something original. Once something
                            original is created other new replicas are not originals and thus a thinking
                            agent must modify to continue to form additional original creations. This
                            continued potential to form original output due to an, often cyclical,
                            adaptability is creativity.</dd>
                        <dt>Data</dt>
                        <dd>Data is atomic facets of individual items in storage. Data is extremely
                            primitive and should be thought of as facts that are not necessarily true or
                            valid.</dd>
                        <dt>Information</dt>
                        <dd>Information is a description upon data, the data described, and the
                            relationship between those two, or more, items. Information can come in the form
                            of adjectives, organization, relationships, or other data extension. An
                            computational example of information is an RDF triplet or a parsed code token.</dd>
                        <dt>Intelligence</dt>
                        <dd>Intelligence is the potential for learning. This implies a learning ability
                            plus an adaptable nature where an earlier learning allows potential change for
                            new and different learning potential.</dd>
                        <dt>Knowledge</dt>
                        <dd>Knowledge is an extension of shared information. Examples of knowledge are
                            evaluations, descriptions, assessments, opinions, or any form of qualifier or
                            elaboration. Knowledge should be thought of as an indication of understanding
                            upon a unit of information.</dd>
                        <dt>Parser</dt>
                        <dd>A parser decomposes computer code, which is typically expressed to humans as
                            a string of text characters, into bits with descriptions the computers can use
                            to make sense of the code.</dd>
                        <dt>Wisdom</dt>
                        <dd>Wisdom is evidence of advanced learning from the result of shared knowledge.
                            Wisdom is commonly evident when two or more pieces of knowledge come together to
                            produce something new, either complementary or in contrasting collision. The
                            definition of wisdom is closely aligned to John Stuart Mill's definition of
                            <em>liberty</em>
                            <a href="#cite-mill">(Mill, 1869)</a>.</dd>
                    </dl>
                </div>
                <div class="segment" id="ai">
                    <h2>Artificial Intelligence</h2>
                    <p>At the time of this writing any form of sharing between applications is
                        limited and explicit. Applications execute entirely within their own vertical
                        funnel from application code, inputs, outputs, and evaluations. If anything must
                        be shared to another application additional work is required to provide an
                        interface, commonly referred to as an API (Application Programming Interface),
                        so that data of the executing application's choosing is provided in a
                        non-standard format dicated by that application. Data opposed to information is
                        shared and the sharing is ad hoc.</p>
                    <div class="segment" id="ai_parsers">
                        <h3>The Universal Constant of Parsers</h3>
                        <p>Computers operate with machine language. Virtually no software in common use
                            today is written by humans in machine language. As a result, a compiler is
                            required for all modern software to translate instructions written by humans
                            into the instructions executed by computer hardware. Compilers require a parser
                            to decompose the instructions into small atomic pieces that can be described
                            sufficiently for a variety of tasks, including translation. It can be reasoned
                            that all modern application code passes through a parser, and possibly through
                            many domain specific parsers for various different forms of interpretation.</p>
                        <p>It can be reasoned parsers are, perhaps, as universally present as the
                            instructions they describe. Parsers fit this paper's definition of
                            <em>information</em>
                            as they associate data with a plurality of descriptions. If the parsed data were
                            available for consumption to a variety of applications that act of sharing and
                            the processing resultant from that sharing fit this paper's definition of
                            <em>knowledge</em>. When that knowledge, or rather the application's reasoning
                            of parsed information, is available for consumption by other applications
                            <em>wisdom</em>
                            is achieved. When wisdom forms a model for application modification artificial
                            intelligence is achieved.</p>
                    </div>
                    <div class="segment" id="ai_data">
                        <h3>Contrary to a Data Economy</h3>
                        <p>At the time of this writing the dominant economy of software development is a
                            data economy composed of a few massively monolithic data brokers. Amazing
                            conglomerates have risen up with astounding value to gather and horde treasure
                            troves of data. Value and revenue are generated from transforming data into
                            information that is partially transferred to the end user and partially
                            transferred to advertising firms using data auctions. While it is the
                            information that is responsible for the enterprise value this information is
                            formed entirely upon data held in a secretive vault.</p>
                        <p>In order for this economy to generate wealth data is horded and never
                            returned, unless so directed by law. Only information is returned. This ensures
                            competing firms must independently gather their own data. Since that proprietary
                            and heavily secured data is the foundation of the data economy it must never be
                            shared with external parties.</p>
                        <p>An artificially intelligent system requires only minimal data to thrive.
                            Speaking from human experience prior decisions are a more significant source of
                            accuracy and validation than data. People typically refer to this as
                            <em>experience</em>. Data on its own does not validate or qualify anything as
                            data is too primitive. A qualifier, a purpose built application, must reason
                            upon the data and generate a conclusion. To determine if data is valid or
                            invalid a qualifying application evaluates the data against a know set of rules.
                            The data isn't qualifing anything, but rather an application that produces a
                            decision. The advantage afforded an artificially intelligent system is the
                            ability to mreasure a current decision against a prior decision in consideration
                            for whether that very decision-making ability is in demand of improvement, which
                            serves as a far superior and autonomously improving qualifier than a data facet
                            or a primitive collection of static rules.</p>
                        <p>The reasoning, that prior decisions are more valuable than hording data,
                            introduces friction for an economy that derives its value solely upon its stored
                            data. In this case an artificially intelligent system would render that economy
                            largely obsolete. Stored decision points are a more valuable commodity than a
                            vault of horded data. Additionally, the qualify of those decision points when
                            increased sharing allows domain specific applications to independently
                            contribute to an artificially intelligent system, which is contrary to the
                            nature of hording and never sharing data. Data, due to its primitive nature,
                            loses value with age faster than qualified decisions thereby creating a large
                            diminishing return on investment over time.</p>
                        <p>Higher order sharing is the basis of an artificially intelligent system. As
                            technologies advance and more domain specific technologies arise, in direct
                            support of artificially intelligent systems, the value of closed systems will
                            proportionaly erode in value and demand, economically speaking. This erosion of
                            value is compounded in that artificially intelligent systems demand less data
                            over time as their store of decision points increases from experience. These two
                            economic factors represent value destroyers to a data economy as artifically
                            intelligent systems, particularly open systems, come online.</p>
                    </div>
                    <div class="segment" id="ai_compilation">
                        <h3>Static Compilation</h3>
                        <p>Traditionally, most applications are written in a computer programming
                            language that is compiled to machine language and only this form of the
                            application is available to the end user. In this case a parse step is available
                            to the compiler when the application code is translated to machine language, but
                            that parsed data is discarded and never shared. Such a disregard for code
                            sharing is obstructive to an artificially intelligent system, but this is not
                            incredibly harmful in the short term. In the near term a more potent
                            consideration is to ensure powerful applications are capable of contributing
                            information to an artificially intelligent system even if the application code
                            cannot be modified by the intelligent system. While reasoning about the internal
                            operations of large and powerful applications is not an immediate priority at
                            the time of this writing this could change once artificial intelligence is
                            better understood in practice.</p>
                    </div>
                </div>
                <div class="segment" id="information">
                    <h2>Information Sharing</h2>
                    <p>As previously described automated knowledge is potentially available from the
                        sharing of parsed instructions. In order for this idea to be feasible there must
                        exist a standard format for parsed output and this format must be regular and
                        simple. In order to expedite sharing there must be a standard convention to
                        store the parsed output so that it is available upon demand.</p>
                    <div class="segment" id="information_format">
                        <h3>Standard Format</h3>
                        <p>Parsers most typically output in a format called a parse tree. Parse trees
                            are commonly hierarchies with various different descriptions associated with
                            different data facets in different ways depending upon a data facet in question.
                            This is highly irregular and highly language specific. The heirarchal nature of
                            parse trees also make them more costly to access, in comparison to a flat list,
                            and more challenging to standardize into a universal format.</p>
                        <p>Instead of parse trees I propose a table as output. Tables are simple and
                            regular.
                        </p>
                        <p>An example of a parse table as a regular format for output is available from the
                            <a
                                href="https://github.com/Unibeautify/parse-framework/blob/master/docs/tech-documentation.md#output">Parse-Framework</a>
                            <a href="#cite-cheney">(Cheney, 2017)</a>.</p>
                        <table>
                            <caption>Table 1, An example of a parse table expressed by the Parse-Framework
                                using sample code:
                                <em>&lt;a&gt;&lt;b class="cat"&gt;&lt;/b&gt;&lt;/a&gt;</em>
                            </caption>
                            <thead>
                                <tr>
                                    <th>index</th>
                                    <th>begin</th>
                                    <th>lexer</th>
                                    <th>lines</th>
                                    <th>presv</th>
                                    <th>stack</th>
                                    <th>token</th>
                                    <th>types</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr class="even markup">
                                    <td>0</td>
                                    <td>-1</td>
                                    <td>markup</td>
                                    <td>0</td>
                                    <td>false</td>
                                    <td>global</td>
                                    <td>&lt;a&gt;</td>
                                    <td>start</td>
                                </tr>
                                <tr class="odd markup">
                                    <td>1</td>
                                    <td>0</td>
                                    <td>markup</td>
                                    <td>0</td>
                                    <td>false</td>
                                    <td>a</td>
                                    <td>&lt;b&gt;</td>
                                    <td>start</td>
                                </tr>
                                <tr class="even markup">
                                    <td>2</td>
                                    <td>1</td>
                                    <td>markup</td>
                                    <td>0</td>
                                    <td>false</td>
                                    <td>b</td>
                                    <td>class="cat"</td>
                                    <td>attribute</td>
                                </tr>
                                <tr class="odd markup">
                                    <td>3</td>
                                    <td>1</td>
                                    <td>markup</td>
                                    <td>0</td>
                                    <td>false</td>
                                    <td>b</td>
                                    <td>&lt;/b&gt;</td>
                                    <td>end</td>
                                </tr>
                                <tr class="even markup">
                                    <td>4</td>
                                    <td>0</td>
                                    <td>markup</td>
                                    <td>0</td>
                                    <td>false</td>
                                    <td>a</td>
                                    <td>&lt;/a&gt;</td>
                                    <td>end</td>
                                </tr>
                            </tbody>
                        </table>
                        <table>
                            <caption>Table 2, A second example processed through Parse-Framework
                                illustrating a format, React JSX, comprised of multiple languages. The sample
                                code is:
                                <em>var a = (&lt;hr /* asdf */ />);</em>
                            </caption>
                            <thead>
                                <tr>
                                    <th>index</th>
                                    <th>begin</th>
                                    <th>lexer</th>
                                    <th>lines</th>
                                    <th>presv</th>
                                    <th>stack</th>
                                    <th>token</th>
                                    <th>types</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr class="even script">
                                    <td>0</td>
                                    <td>-1</td>
                                    <td>script</td>
                                    <td>0</td>
                                    <td>false</td>
                                    <td>global</td>
                                    <td>var</td>
                                    <td>word</td>
                                </tr>
                                <tr class="odd script">
                                    <td>1</td>
                                    <td>-1</td>
                                    <td>script</td>
                                    <td>1</td>
                                    <td>false</td>
                                    <td>global</td>
                                    <td>a</td>
                                    <td>word</td>
                                </tr>
                                <tr class="even script">
                                    <td>2</td>
                                    <td>-1</td>
                                    <td>script</td>
                                    <td>1</td>
                                    <td>false</td>
                                    <td>global</td>
                                    <td>=</td>
                                    <td>operator</td>
                                </tr>
                                <tr class="odd script">
                                    <td>3</td>
                                    <td>-1</td>
                                    <td>script</td>
                                    <td>1</td>
                                    <td>false</td>
                                    <td>global</td>
                                    <td>(</td>
                                    <td>start</td>
                                </tr>
                                <tr class="even markup">
                                    <td>4</td>
                                    <td>3</td>
                                    <td>markup</td>
                                    <td>0</td>
                                    <td>false</td>
                                    <td>paren</td>
                                    <td>&lt;hr/&gt;</td>
                                    <td>singleton</td>
                                </tr>
                                <tr class="odd markup">
                                    <td>5</td>
                                    <td>4</td>
                                    <td>markup</td>
                                    <td>0</td>
                                    <td>false</td>
                                    <td>hr</td>
                                    <td>/* asdf */</td>
                                    <td>attribute</td>
                                </tr>
                                <tr class="even script">
                                    <td>6</td>
                                    <td>3</td>
                                    <td>script</td>
                                    <td>0</td>
                                    <td>false</td>
                                    <td>paren</td>
                                    <td>)</td>
                                    <td>end</td>
                                </tr>
                                <tr class="odd script">
                                    <td>7</td>
                                    <td>-1</td>
                                    <td>script</td>
                                    <td>0</td>
                                    <td>false</td>
                                    <td>global</td>
                                    <td>;</td>
                                    <td>separator</td>
                                </tr>
                            </tbody>
                        </table>
                        <p>It should be noticed the Parse-Framework example may not represent a complete
                            or final information format for a general purpose artificial system. This format
                            was specifically created to meet the demands of several specialized tasks
                            relevant to a specific class of work. The wonderful quality of a simplified
                            table format is that the format can be easily extended in future versions as
                            additional needs are identified.</p>
                    </div>
                    <div class="segment" id="information_case">
                        <h3>Example Use Case</h3>
                        <p>There are many use cases for the parse table above. Perhaps a user must
                            reason about the code sample or gather contextual information from it for
                            accessibility or security purposes. A user could be evaluating a code sample and
                            may need the code reformatted into a modified presentation that is easier to
                            read such that the code is beautified. A user may need to know how a modified
                            code samle changed compared to the unmodified code and find only the specific
                            differences relevant to the code.</p>
                        <p>There are various different tasks a user may require upon a simple coded
                            instruction all of which are achievable from the same single parse operation
                            provided that parse operation returns a standard format that various other
                            software applications understand. Sharing the same parse table between different
                            applications that perform different unrelated jobs achieves
                            <em>knowledge</em>
                            so long as the output generated by each application is consumable to each
                            requesting application.</p>
                    </div>
                    <div class="segment" id="information_distribution">
                        <h3>Distribution Scheme</h3>
                        <p>It is necessary to establish a standard scheme or protocol by which the
                            standard format is communicated. The immediate advantage allows various
                            applications to talk to each other, in a common language, and share their parsed
                            information. Second and third order consequences of a standard distribution
                            scheme allow applications to hsare in unexpected ways that contribute to more
                            efficient knowledge creation.</p>
                        <p>A strong candidate for a standard information sharing scheme comes from
                            Microsoft in the project
                            <em>Language Server Protocol</em>
                            <a href="#cite-sourcegraph">(Sourcegraph, 2017)</a>. The Language Server
                            Protocol (LSP) provides an interconnection mechanism to allow a local
                            application to act as a central authority to monitor the edit status of code in
                            a variety of supported languages and issue helpful suggestions or errors
                            immediately to the application where the edit originated.</p>
                        <p>There are a couple of strengths in this approach. One strength is that the
                            analysis occurs in near real-time using an asynchronous event model. This
                            benefits speed of processing without locking an execution thread in the OS
                            kernel. It also establishes a secondary processing stack to observe and analyze
                            a different application stack which can provide a necessary form of bounds
                            checking.</p>
                        <p>For more information LSP please view the supported documentation and
                            associated Github project at:</p>
                        <ul>
                            <li>
                                <a href="https://langserver.org/">https://langserver.org/</a>
                            </li>
                            <li>
                                <a href="https://github.com/Microsoft/language-server-protocol">https://github.com/Microsoft/language-server-protocol</a>
                            </li>
                        </ul>
                    </div>
                </div>
                <div class="segment" id="knowledge">
                    <h2>Knowledge Sharing</h2>
                    <p>At the time of this writing the necessity of a standard knowledge format has
                        not been thought through. It is unknown, without considerable practical
                        experience, whether such is necessary of what the ideal format would look like.
                        In reflection of prior technologies, it can be presumed a standard knowledge
                        format would improve the ease and efficiency of knowledge sharing. Before
                        speculation upon such needs it is to implement a robust information sharing
                        mechanism in production and observe its use across a variety of application
                        tasks to determine how this technology can enable more intelligent
                        considerations for future technologies.</p>
                </div>
                <div class="segment" id="modification">
                    <h2>Application Modification</h2>
                    <p>Intelligent systems present in nature adapt and evolve to respond to changes
                        and repated stimulus. Artificially intelligent systems cannot become more
                        intelligent unless they too adapt to their stimulus. Without such adaptation
                        systems of applications are only as intelligent as their original instructions
                        allow and never improve except though manual software updates. For a system to
                        truly qualify as intelligent their adaptation must be automated.</p>
                    <div class="segment" id="modification_languages">
                        <h3>Immediately Practical Only to High-Level Languages</h3>
                        <p>Modification of available applications is most easily accomplished if the
                            comprised applications are written in a langauge that compiles at run time.
                            JavaScript and Python are popular examples of such languages. In the case of
                            these languages application instances compile generally quickly when executed
                            which allows modification of source code with only the most minimal delay
                            between code change and application response.</p>
                        <p>Application modification at high level application langauges is not efficient
                            for complex math heavy tasks that demand many various considerations untense
                            hardware constraints. Economically speaking, exploration for on-demand
                            modification of applications in more computationally sensitive langauges will
                            occur in proportion to the demand. Once this theoretical idea becomes a common
                            practical implementation the probability of technical refinement and specific
                            execution considerations, particularly among fast low-level languages, will
                            become available in accordance with supply and demand.</p>
                    </div>
                    <div class="segment" id="modification_case">
                        <h3>Example Use Case</h3>
                        <p>Under the
                            <a href="#information">Information Sharing</a>
                            section a use case example demonstrated modifying a small sample of XML for
                            various processing considerations from a single parse step. Imagine a second
                            application stack is running to observe the primary application stack in this
                            same scenario. Imagine an observing application is a code coverage tool and
                            realizes that out of a hundred execution cycles one of the applications in the
                            primary stack, such as a code beautification tool, contains logic that never
                            executes. This application can be modified by removing this unnecessary logic.
                            Finally, imagine, that observing software identifies missed opportunities and
                            inserts the necessary logic into the primary application.</p>
                        <p>In this set of imaginary hypotheticals there are severl implicit tasks.
                            First, software writing software is a huge challenge. Identifying logic worthy
                            of removal is less challenging than writing new logic and ensuring this new
                            logic applied in the appropriate location in the application. For human
                            developers this requires heavy manual and automated validation. The primary
                            concern with application writing software is ensuring code changes occur with
                            high confidence without major delays in execution time. Secondly, identifying
                            missed opportunitie demands hueristics that are diffecult for people to identify
                            must less for software to detect such in an automated fashion.</p>
                        <p>Nonetheless, challenges withstanding, these capabilities reamind completely
                            possible and will certainly demand a lot of experience and refinement to operate
                            correctly in a real-world scenario. In a lesser manner examples of automated
                            application modification are already present with the options
                            <em>fix</em>
                            and
                            <em>correct</em>
                            from ESLint and Pretty Diff respectively. In these examples parsed code is
                            modified to correct for minor syntax considerations. Correcting for syntax is
                            more primitive than writing new logic with regard to decision points, but it is
                            a similar precedent that is available in production environments.</p>
                        <ul>
                            <li>
                                <a href="https://eslint.org/docs/rules/">ESLint fix option</a>
                            </li>
                            <li>
                                <a href="http://prettydiff.com/documentation.xhtml#correct">Pretty Diff correct option</a>
                            </li>
                        </ul>
                    </div>
                </div>
                <div class="segment" id="roadmap">
                    <h2>Roadmap Towards a Working Prototype</h2>
                    <p>The first step is to establish a universal parse convention. This is
                        currently underway in the mentioned Parse-Framework utility. At the time of this
                        writing no production code is consuming the Parse-Framework, but work is
                        currently underway to update the popular JS Beautify and Pretty Diff
                        applications to use the framework. Since the Parse-Framework is not yet used in
                        a public facing utility it could be subject change as additional needs are
                        identified.</p>
                    <p>The Language Server Protocol is in production and used by several code
                        editing applications. Once the Parse-Framework enters production a next logical
                        step will be to integrate it into the LSP and identify technical opportunities
                        that aren't clear at present.</p>
                    <p>Once the Parse-Framework and LSP play nicely together and the available
                        advantages, or disadvantages, become clear the next step will be to identify
                        quick wins that may enable simplified conventions to ease application
                        modification. It will be ideal if there is a guide to model or assist
                        applicatoin developers in writing their applications in a more AI friendly
                        manner. Such a model will not be clear until this state of development is
                        available for experimentation.</p>
                </div>
                <div class="segment" id="cited">
                    <h2>Works Cited</h2>
                    <ul>
                        <li id="cite-bolton">Bolton, D. (2017, August 28). The Definition and Purpose of
                            a Compiler. Retrieved November 13, 2017, from ThoughtCo:
                            https://www.thoughtco.com/what-is-a-compiler-958322</li>
                        <li id="cite-cheney">Cheney, A. (2017, September 7). Tech Documentation,
                            Parse-Framework. Retrieved November 13, 2017, from Github:
                            https://github.com/Unibeautify/parse-framework/blob/master/docs/tech-documentation.md#output</li>
                        <li id="cite-cherry">Cherry, K. (2017, May 21). What is Brain Plasticity?
                            Retrieved November 13, 2017, from verywell:
                            https://www.verywell.com/what-is-brain-plasticity-2794886</li>
                        <li id="cite-herculano">Herculano-Houzel, S., Avelino-de-Souza, K., Neves, K.,
                            Porfirio, J., Messeder, D., Feijo, L. M., . . . Manger, P. R. (2014, June 12).
                            The elephant brain in numbers. Retrieved November 13, 2017, from frontiers in
                            Neuroanatomy: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4053853/</li>
                        <li id="cite-microsoft">Microsoft. (2017, November 15). Language Server
                            Protocol. Retrieved November 16, 2017, from Github:
                            https://github.com/Microsoft/language-server-protocol</li>
                        <li id="cite-mirkin">Mirkin, Gabe. (2013, May 19). Ernest Duchesne, the Father
                            of Antibiotics. Retrieved November 27, 2017, from DrMirkin.com:
                            http://www.drmirkin.com/histories-and-mysteries/ernest-duchesne-the-father-of-antibiotics.html</li>
                        <li id="cite-mill">Mill, J. S. (1869). On Liberty (4th Edition ed.). London:
                            Longman, Roberts &amp; Green.</li>
                        <li id="cite-newitz">Newitz, A. (2015, February 17). Why the Speech Center of
                            Your Brain Shuts Down When You Talk. Retrieved November 13, 2017, from Gizmodo:
                            https://gizmodo.com/why-the-speech-center-of-your-brain-shuts-down-when-you-1686145474</li>
                        <li id="cite-owen">Owen, J. (2004, December 9). Crows as Clever as Great Apes,
                            Study Says. Retrieved November 13, 2017, from National Geographic News:
                            https://news.nationalgeographic.com/news/2004/12/1209_041209_crows_apes.html</li>
                        <li id="cite-pickrell">Pickrell, J. (2003, April 23). Crows Better at Tool
                            Building Than Chimps, Study Says. Retrieved November 13, 2017, from National
                            Geographic News:
                            https://news.nationalgeographic.com/news/2003/04/0423_030423_crowtools.html</li>
                        <li id="cite-sourcegraph">Sourcegraph. (2017, November 2). Langserver.org.
                            Retrieved November 16, 2017, from Langserver.org: https://langserver.org/</li>
                    </ul>
                </div>
            </section>
        </div>
        <script src="../lib/global.js" type="application/javascript"></script>
        <script src="../api/dom.js" type="application/javascript"></script>
    </body>
</html>
